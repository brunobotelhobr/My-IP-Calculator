name: CD-Continuous-Deployment
on:
  workflow_dispatch:
    inputs:
      version:
        type: string
        description: 'Release version'
        required: true

jobs:

  Version-Check:
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ github.event.inputs.version }}
      PYTHON: '3.11'
    steps:
      - uses: actions/checkout@master
      - name: Setup Python
        uses: actions/setup-python@master
      - name: Vesion Check
        run: |
          # Regex to fech if it is in format 1.2.12
          echo "Current Version: $VERSION"
          if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Version is not in format 1.2.3"
            exit 1
          fi
          echo "Version is in the correct format"
          # Install Packages
          pip install poetry
          poetry config virtualenvs.create false
          poetry install
          export APPVERSION=$(python3 src/app/cmd.py version)
          if [[ $APPVERSION != $VERSION ]]; then
            echo "Version in code ($APPVERSION) is NOT the same as the one in the Action Release ($VERSION)"
            exit 1
          fi
          echo "Version in code ($APPVERSION) is the same as the one in the release ($VERSION)"

  Call-CI:
    needs: [Version-Check]
    uses: ./.github/workflows/ci.yml
    secrets:
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
  

  Deploy-Docs:
    needs: [Call-CI, Version-Check]
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ github.event.inputs.version }}
    steps:
      - name: Setup Python
        uses: actions/setup-python@master
      - uses: actions/checkout@master
      - name: Set up Documentation
        run: |
          pip install poetry
          poetry config virtualenvs.create false
          poetry install
          mike deploy -b documentation $VERSION
          mike set-default -b documentation $VERSION 
          mike alias -b documentation -u $VERSION latest 
          python3 scripts/update-doc.py $VERSION


  Deploy-DockerHub:
    needs: [Call-CI, Version-Check]
    runs-on: ubuntu-latest
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASS }}
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: |
            brunobotelhobr/my-ip-calculator
        # generate Docker tags for the images, altest and version
          tags: |
            latest
            ${{ github.event.inputs.version }}
           
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
    
  Deploy-PyPi:
    needs: [Call-CI, Version-Check]
    runs-on: ubuntu-latest
  
    steps:
      - uses: actions/checkout@master
      - name: Setup Python
        uses: actions/setup-python@master
        with:
          python-version: 3.11
      - name: Install dependencies
        run: |
          pip install poetry
          poetry config virtualenvs.create false
          poetry install
      - name: Testinf
        run: |
          task test
      - name: Build
        run: |
          poetry build
      - name: Publish
        uses: JRubics/poetry-publish@v2.0
        with:
          pypi_token: ${{ secrets.PYPI_TOKEN }}
